/*
 * This file is generated by jOOQ.
 */
package com.github.skapral.poetryclub.db.jooq.tables;


import com.github.skapral.poetryclub.db.jooq.Indexes;
import com.github.skapral.poetryclub.db.jooq.Keys;
import com.github.skapral.poetryclub.db.jooq.Public;
import com.github.skapral.poetryclub.db.jooq.tables.records.FeedbackRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feedback extends TableImpl<FeedbackRecord> {

    private static final long serialVersionUID = -1689447218;

    /**
     * The reference instance of <code>public.feedback</code>
     */
    public static final Feedback FEEDBACK = new Feedback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedbackRecord> getRecordType() {
        return FeedbackRecord.class;
    }

    /**
     * The column <code>public.feedback.id</code>.
     */
    public final TableField<FeedbackRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('feedback_id'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.feedback.timestamp</code>.
     */
    public final TableField<FeedbackRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.feedback.accountid</code>.
     */
    public final TableField<FeedbackRecord, Long> ACCOUNTID = createField("accountid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.feedback.contributionid</code>.
     */
    public final TableField<FeedbackRecord, Long> CONTRIBUTIONID = createField("contributionid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.feedback.uuid</code>.
     */
    public final TableField<FeedbackRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.feedback.url</code>.
     */
    public final TableField<FeedbackRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>public.feedback.status</code>.
     */
    public final TableField<FeedbackRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("'unapproved'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.feedback</code> table reference
     */
    public Feedback() {
        this(DSL.name("feedback"), null);
    }

    /**
     * Create an aliased <code>public.feedback</code> table reference
     */
    public Feedback(String alias) {
        this(DSL.name(alias), FEEDBACK);
    }

    /**
     * Create an aliased <code>public.feedback</code> table reference
     */
    public Feedback(Name alias) {
        this(alias, FEEDBACK);
    }

    private Feedback(Name alias, Table<FeedbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feedback(Name alias, Table<FeedbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Feedback(Table<O> child, ForeignKey<O, FeedbackRecord> key) {
        super(child, key, FEEDBACK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FEEDBACK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FeedbackRecord, Long> getIdentity() {
        return Keys.IDENTITY_FEEDBACK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeedbackRecord> getPrimaryKey() {
        return Keys.FEEDBACK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeedbackRecord>> getKeys() {
        return Arrays.<UniqueKey<FeedbackRecord>>asList(Keys.FEEDBACK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FeedbackRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeedbackRecord, ?>>asList(Keys.FEEDBACK__FEEDBACK_ACCOUNTID_FKEY, Keys.FEEDBACK__FEEDBACK_CONTRIBUTIONID_FKEY);
    }

    public Account account() {
        return new Account(this, Keys.FEEDBACK__FEEDBACK_ACCOUNTID_FKEY);
    }

    public Contribution contribution() {
        return new Contribution(this, Keys.FEEDBACK__FEEDBACK_CONTRIBUTIONID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feedback as(String alias) {
        return new Feedback(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feedback as(Name alias) {
        return new Feedback(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(String name) {
        return new Feedback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feedback rename(Name name) {
        return new Feedback(name, null);
    }
}
